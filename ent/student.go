// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-example-rpc/ent/student"
)

// Student is the model entity for the Student schema.
type Student struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// AgeInt32 holds the value of the "age_int32" field.
	AgeInt32 int32 `json:"age_int32,omitempty"`
	// AgeInt64 holds the value of the "age_int64" field.
	AgeInt64 int64 `json:"age_int64,omitempty"`
	// AgeUint holds the value of the "age_uint" field.
	AgeUint uint `json:"age_uint,omitempty"`
	// AgeUint32 holds the value of the "age_uint32" field.
	AgeUint32 uint32 `json:"age_uint32,omitempty"`
	// AgeUint64 holds the value of the "age_uint64" field.
	AgeUint64 uint64 `json:"age_uint64,omitempty"`
	// WeightFloat holds the value of the "weight_float" field.
	WeightFloat float64 `json:"weight_float,omitempty"`
	// WeightFloat32 holds the value of the "weight_float32" field.
	WeightFloat32 float32 `json:"weight_float32,omitempty"`
	// ClassID holds the value of the "class_id" field.
	ClassID uuid.UUID `json:"class_id,omitempty"`
	// EnrollAt holds the value of the "enroll_at" field.
	EnrollAt time.Time `json:"enroll_at,omitempty"`
	// StatusBool holds the value of the "status_bool" field.
	StatusBool bool `json:"status_bool,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Student) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case student.FieldStatusBool:
			values[i] = new(sql.NullBool)
		case student.FieldWeightFloat, student.FieldWeightFloat32:
			values[i] = new(sql.NullFloat64)
		case student.FieldID, student.FieldAge, student.FieldAgeInt32, student.FieldAgeInt64, student.FieldAgeUint, student.FieldAgeUint32, student.FieldAgeUint64:
			values[i] = new(sql.NullInt64)
		case student.FieldName:
			values[i] = new(sql.NullString)
		case student.FieldCreatedAt, student.FieldUpdatedAt, student.FieldEnrollAt:
			values[i] = new(sql.NullTime)
		case student.FieldClassID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Student", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Student fields.
func (s *Student) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case student.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case student.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case student.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case student.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case student.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				s.Age = int(value.Int64)
			}
		case student.FieldAgeInt32:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age_int32", values[i])
			} else if value.Valid {
				s.AgeInt32 = int32(value.Int64)
			}
		case student.FieldAgeInt64:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age_int64", values[i])
			} else if value.Valid {
				s.AgeInt64 = value.Int64
			}
		case student.FieldAgeUint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age_uint", values[i])
			} else if value.Valid {
				s.AgeUint = uint(value.Int64)
			}
		case student.FieldAgeUint32:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age_uint32", values[i])
			} else if value.Valid {
				s.AgeUint32 = uint32(value.Int64)
			}
		case student.FieldAgeUint64:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age_uint64", values[i])
			} else if value.Valid {
				s.AgeUint64 = uint64(value.Int64)
			}
		case student.FieldWeightFloat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_float", values[i])
			} else if value.Valid {
				s.WeightFloat = value.Float64
			}
		case student.FieldWeightFloat32:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_float32", values[i])
			} else if value.Valid {
				s.WeightFloat32 = float32(value.Float64)
			}
		case student.FieldClassID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field class_id", values[i])
			} else if value != nil {
				s.ClassID = *value
			}
		case student.FieldEnrollAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field enroll_at", values[i])
			} else if value.Valid {
				s.EnrollAt = value.Time
			}
		case student.FieldStatusBool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status_bool", values[i])
			} else if value.Valid {
				s.StatusBool = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Student.
// Note that you need to call Student.Unwrap() before calling this method if this Student
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Student) Update() *StudentUpdateOne {
	return NewStudentClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Student entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Student) Unwrap() *Student {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Student is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Student) String() string {
	var builder strings.Builder
	builder.WriteString("Student(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", s.Age))
	builder.WriteString(", ")
	builder.WriteString("age_int32=")
	builder.WriteString(fmt.Sprintf("%v", s.AgeInt32))
	builder.WriteString(", ")
	builder.WriteString("age_int64=")
	builder.WriteString(fmt.Sprintf("%v", s.AgeInt64))
	builder.WriteString(", ")
	builder.WriteString("age_uint=")
	builder.WriteString(fmt.Sprintf("%v", s.AgeUint))
	builder.WriteString(", ")
	builder.WriteString("age_uint32=")
	builder.WriteString(fmt.Sprintf("%v", s.AgeUint32))
	builder.WriteString(", ")
	builder.WriteString("age_uint64=")
	builder.WriteString(fmt.Sprintf("%v", s.AgeUint64))
	builder.WriteString(", ")
	builder.WriteString("weight_float=")
	builder.WriteString(fmt.Sprintf("%v", s.WeightFloat))
	builder.WriteString(", ")
	builder.WriteString("weight_float32=")
	builder.WriteString(fmt.Sprintf("%v", s.WeightFloat32))
	builder.WriteString(", ")
	builder.WriteString("class_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ClassID))
	builder.WriteString(", ")
	builder.WriteString("enroll_at=")
	builder.WriteString(s.EnrollAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status_bool=")
	builder.WriteString(fmt.Sprintf("%v", s.StatusBool))
	builder.WriteByte(')')
	return builder.String()
}

// Students is a parsable slice of Student.
type Students []*Student
