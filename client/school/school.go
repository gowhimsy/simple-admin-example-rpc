// Code generated by goctl. DO NOT EDIT.
// Source: example.proto

package client

import (
	"context"

	"github.com/suyuan32/simple-admin-example-rpc/example"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDResp        = example.BaseIDResp
	BaseResp          = example.BaseResp
	BaseUUIDResp      = example.BaseUUIDResp
	Empty             = example.Empty
	IDReq             = example.IDReq
	IDsReq            = example.IDsReq
	PageInfoReq       = example.PageInfoReq
	StatusCodeReq     = example.StatusCodeReq
	StatusCodeUUIDReq = example.StatusCodeUUIDReq
	StudentInfo       = example.StudentInfo
	StudentListReq    = example.StudentListReq
	StudentListResp   = example.StudentListResp
	TeacherInfo       = example.TeacherInfo
	TeacherListReq    = example.TeacherListReq
	TeacherListResp   = example.TeacherListResp
	UUIDReq           = example.UUIDReq
	UUIDsReq          = example.UUIDsReq

	School interface {
		// Teacher management
		CreateTeacher(ctx context.Context, in *TeacherInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateTeacher(ctx context.Context, in *TeacherInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetTeacherList(ctx context.Context, in *TeacherListReq, opts ...grpc.CallOption) (*TeacherListResp, error)
		GetTeacherById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TeacherInfo, error)
		DeleteTeacher(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultSchool struct {
		cli zrpc.Client
	}
)

func NewSchool(cli zrpc.Client) School {
	return &defaultSchool{
		cli: cli,
	}
}

// Teacher management
func (m *defaultSchool) CreateTeacher(ctx context.Context, in *TeacherInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := example.NewSchoolClient(m.cli.Conn())
	return client.CreateTeacher(ctx, in, opts...)
}

func (m *defaultSchool) UpdateTeacher(ctx context.Context, in *TeacherInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := example.NewSchoolClient(m.cli.Conn())
	return client.UpdateTeacher(ctx, in, opts...)
}

func (m *defaultSchool) GetTeacherList(ctx context.Context, in *TeacherListReq, opts ...grpc.CallOption) (*TeacherListResp, error) {
	client := example.NewSchoolClient(m.cli.Conn())
	return client.GetTeacherList(ctx, in, opts...)
}

func (m *defaultSchool) GetTeacherById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TeacherInfo, error) {
	client := example.NewSchoolClient(m.cli.Conn())
	return client.GetTeacherById(ctx, in, opts...)
}

func (m *defaultSchool) DeleteTeacher(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := example.NewSchoolClient(m.cli.Conn())
	return client.DeleteTeacher(ctx, in, opts...)
}
