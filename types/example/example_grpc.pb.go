// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: example.proto

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Example_InitDatabase_FullMethodName   = "/example.Example/initDatabase"
	Example_CreateStudent_FullMethodName  = "/example.Example/createStudent"
	Example_UpdateStudent_FullMethodName  = "/example.Example/updateStudent"
	Example_GetStudentList_FullMethodName = "/example.Example/getStudentList"
	Example_GetStudentById_FullMethodName = "/example.Example/getStudentById"
	Example_DeleteStudent_FullMethodName  = "/example.Example/deleteStudent"
	Example_CreateTeacher_FullMethodName  = "/example.Example/createTeacher"
	Example_UpdateTeacher_FullMethodName  = "/example.Example/updateTeacher"
	Example_GetTeacherList_FullMethodName = "/example.Example/getTeacherList"
	Example_GetTeacherById_FullMethodName = "/example.Example/getTeacherById"
	Example_DeleteTeacher_FullMethodName  = "/example.Example/deleteTeacher"
)

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// Student management
	// group: student
	CreateStudent(ctx context.Context, in *StudentInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: student
	UpdateStudent(ctx context.Context, in *StudentInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: student
	GetStudentList(ctx context.Context, in *StudentListReq, opts ...grpc.CallOption) (*StudentListResp, error)
	// group: student
	GetStudentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*StudentInfo, error)
	// group: student
	DeleteStudent(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Teacher management
	// group: teacher
	CreateTeacher(ctx context.Context, in *TeacherInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: teacher
	UpdateTeacher(ctx context.Context, in *TeacherInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: teacher
	GetTeacherList(ctx context.Context, in *TeacherListReq, opts ...grpc.CallOption) (*TeacherListResp, error)
	// group: teacher
	GetTeacherById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TeacherInfo, error)
	// group: teacher
	DeleteTeacher(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type exampleClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleClient(cc grpc.ClientConnInterface) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Example_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) CreateStudent(ctx context.Context, in *StudentInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, Example_CreateStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UpdateStudent(ctx context.Context, in *StudentInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Example_UpdateStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) GetStudentList(ctx context.Context, in *StudentListReq, opts ...grpc.CallOption) (*StudentListResp, error) {
	out := new(StudentListResp)
	err := c.cc.Invoke(ctx, Example_GetStudentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) GetStudentById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*StudentInfo, error) {
	out := new(StudentInfo)
	err := c.cc.Invoke(ctx, Example_GetStudentById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) DeleteStudent(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Example_DeleteStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) CreateTeacher(ctx context.Context, in *TeacherInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Example_CreateTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) UpdateTeacher(ctx context.Context, in *TeacherInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Example_UpdateTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) GetTeacherList(ctx context.Context, in *TeacherListReq, opts ...grpc.CallOption) (*TeacherListResp, error) {
	out := new(TeacherListResp)
	err := c.cc.Invoke(ctx, Example_GetTeacherList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) GetTeacherById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*TeacherInfo, error) {
	out := new(TeacherInfo)
	err := c.cc.Invoke(ctx, Example_GetTeacherById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) DeleteTeacher(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Example_DeleteTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServer is the server API for Example service.
// All implementations must embed UnimplementedExampleServer
// for forward compatibility
type ExampleServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// Student management
	// group: student
	CreateStudent(context.Context, *StudentInfo) (*BaseIDResp, error)
	// group: student
	UpdateStudent(context.Context, *StudentInfo) (*BaseResp, error)
	// group: student
	GetStudentList(context.Context, *StudentListReq) (*StudentListResp, error)
	// group: student
	GetStudentById(context.Context, *IDReq) (*StudentInfo, error)
	// group: student
	DeleteStudent(context.Context, *IDsReq) (*BaseResp, error)
	// Teacher management
	// group: teacher
	CreateTeacher(context.Context, *TeacherInfo) (*BaseUUIDResp, error)
	// group: teacher
	UpdateTeacher(context.Context, *TeacherInfo) (*BaseResp, error)
	// group: teacher
	GetTeacherList(context.Context, *TeacherListReq) (*TeacherListResp, error)
	// group: teacher
	GetTeacherById(context.Context, *UUIDReq) (*TeacherInfo, error)
	// group: teacher
	DeleteTeacher(context.Context, *UUIDsReq) (*BaseResp, error)
	mustEmbedUnimplementedExampleServer()
}

// UnimplementedExampleServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServer struct {
}

func (UnimplementedExampleServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedExampleServer) CreateStudent(context.Context, *StudentInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedExampleServer) UpdateStudent(context.Context, *StudentInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedExampleServer) GetStudentList(context.Context, *StudentListReq) (*StudentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentList not implemented")
}
func (UnimplementedExampleServer) GetStudentById(context.Context, *IDReq) (*StudentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentById not implemented")
}
func (UnimplementedExampleServer) DeleteStudent(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedExampleServer) CreateTeacher(context.Context, *TeacherInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeacher not implemented")
}
func (UnimplementedExampleServer) UpdateTeacher(context.Context, *TeacherInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeacher not implemented")
}
func (UnimplementedExampleServer) GetTeacherList(context.Context, *TeacherListReq) (*TeacherListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherList not implemented")
}
func (UnimplementedExampleServer) GetTeacherById(context.Context, *UUIDReq) (*TeacherInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherById not implemented")
}
func (UnimplementedExampleServer) DeleteTeacher(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeacher not implemented")
}
func (UnimplementedExampleServer) mustEmbedUnimplementedExampleServer() {}

// UnsafeExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServer will
// result in compilation errors.
type UnsafeExampleServer interface {
	mustEmbedUnimplementedExampleServer()
}

func RegisterExampleServer(s grpc.ServiceRegistrar, srv ExampleServer) {
	s.RegisterService(&Example_ServiceDesc, srv)
}

func _Example_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_CreateStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).CreateStudent(ctx, req.(*StudentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_UpdateStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UpdateStudent(ctx, req.(*StudentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_GetStudentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetStudentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_GetStudentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetStudentList(ctx, req.(*StudentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_GetStudentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetStudentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_GetStudentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetStudentById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_DeleteStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).DeleteStudent(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_CreateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).CreateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_CreateTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).CreateTeacher(ctx, req.(*TeacherInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_UpdateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).UpdateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_UpdateTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).UpdateTeacher(ctx, req.(*TeacherInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_GetTeacherList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetTeacherList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_GetTeacherList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetTeacherList(ctx, req.(*TeacherListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_GetTeacherById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetTeacherById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_GetTeacherById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetTeacherById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_DeleteTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).DeleteTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Example_DeleteTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).DeleteTeacher(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Example_ServiceDesc is the grpc.ServiceDesc for Example service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Example_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Example_InitDatabase_Handler,
		},
		{
			MethodName: "createStudent",
			Handler:    _Example_CreateStudent_Handler,
		},
		{
			MethodName: "updateStudent",
			Handler:    _Example_UpdateStudent_Handler,
		},
		{
			MethodName: "getStudentList",
			Handler:    _Example_GetStudentList_Handler,
		},
		{
			MethodName: "getStudentById",
			Handler:    _Example_GetStudentById_Handler,
		},
		{
			MethodName: "deleteStudent",
			Handler:    _Example_DeleteStudent_Handler,
		},
		{
			MethodName: "createTeacher",
			Handler:    _Example_CreateTeacher_Handler,
		},
		{
			MethodName: "updateTeacher",
			Handler:    _Example_UpdateTeacher_Handler,
		},
		{
			MethodName: "getTeacherList",
			Handler:    _Example_GetTeacherList_Handler,
		},
		{
			MethodName: "getTeacherById",
			Handler:    _Example_GetTeacherById_Handler,
		},
		{
			MethodName: "deleteTeacher",
			Handler:    _Example_DeleteTeacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
